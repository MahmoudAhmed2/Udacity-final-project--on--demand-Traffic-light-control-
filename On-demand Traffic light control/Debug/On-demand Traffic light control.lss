
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000009ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001327  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000895  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be6  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a4  00000000  00000000  000035ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adf  00000000  00000000  00003b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000466f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  74:	0c 94 9b 04 	jmp	0x936	; 0x936 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Green_Light_Normal_Mode>:
	Led_off(DIO_PORTA,DIO_PIN1);
	Led_on(DIO_PORTA,DIO_PIN2);
	Led_on(DIO_PORTB,DIO_PIN0);
	Led_off(DIO_PORTB,DIO_PIN1);
	Led_off(DIO_PORTB,DIO_PIN2);
	Delay_Seconds(Traffic_Light_Delay);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Led_on>
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Led_on>
  9c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Traffic_State_>
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	80 ea       	ldi	r24, 0xA0	; 160
  a6:	90 e4       	ldi	r25, 0x40	; 64
  a8:	0e 94 3b 03 	call	0x676	; 0x676 <Delay_Seconds>
  ac:	08 95       	ret

000000ae <Yellow_Light_Normal_Mode>:
  ae:	cf 93       	push	r28
  b0:	ca e0       	ldi	r28, 0x0A	; 10
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Led_toggle>
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	9f e3       	ldi	r25, 0x3F	; 63
  d2:	0e 94 3b 03 	call	0x676	; 0x676 <Delay_Seconds>
  d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Traffic_State_>
  da:	81 11       	cpse	r24, r1
  dc:	08 c0       	rjmp	.+16     	; 0xee <Yellow_Light_Normal_Mode+0x40>
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	82 e4       	ldi	r24, 0x42	; 66
  e2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	82 e4       	ldi	r24, 0x42	; 66
  ea:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Led_on>
  ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Traffic_State_>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	41 f4       	brne	.+16     	; 0x106 <Yellow_Light_Normal_Mode+0x58>
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	82 e4       	ldi	r24, 0x42	; 66
 102:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Led_on>
 106:	c1 50       	subi	r28, 0x01	; 1
 108:	a1 f6       	brne	.-88     	; 0xb2 <Yellow_Light_Normal_Mode+0x4>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	82 e4       	ldi	r24, 0x42	; 66
 10e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	82 e4       	ldi	r24, 0x42	; 66
 116:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <Red_Light_Normal_Mode>:
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	81 e4       	ldi	r24, 0x41	; 65
 122:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	81 e4       	ldi	r24, 0x41	; 65
 132:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Led_on>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	82 e4       	ldi	r24, 0x42	; 66
 13a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Led_on>
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Traffic_State_>
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 ea       	ldi	r24, 0xA0	; 160
 14a:	90 e4       	ldi	r25, 0x40	; 64
 14c:	0e 94 3b 03 	call	0x676	; 0x676 <Delay_Seconds>
 150:	08 95       	ret

00000152 <Yellow_Light_Pedestrian_Mode>:
 152:	cf 93       	push	r28
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	82 e4       	ldi	r24, 0x42	; 66
 160:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	82 e4       	ldi	r24, 0x42	; 66
 170:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 174:	62 e0       	ldi	r22, 0x02	; 2
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	82 e4       	ldi	r24, 0x42	; 66
 180:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Led_off>
 184:	ca e0       	ldi	r28, 0x0A	; 10
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Led_toggle>
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	82 e4       	ldi	r24, 0x42	; 66
 192:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Led_toggle>
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	9f e3       	ldi	r25, 0x3F	; 63
 19e:	0e 94 3b 03 	call	0x676	; 0x676 <Delay_Seconds>
 1a2:	c1 50       	subi	r28, 0x01	; 1
 1a4:	81 f7       	brne	.-32     	; 0x186 <Yellow_Light_Pedestrian_Mode+0x34>
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <__vector_1>:
}
ISR(EXT_INT_0){
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	1f 92       	push	r1
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t state;
	Button_Read(DIO_PORTD,DIO_PIN2,&state);
 1d6:	ae 01       	movw	r20, r28
 1d8:	4f 5f       	subi	r20, 0xFF	; 255
 1da:	5f 4f       	sbci	r21, 0xFF	; 255
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	84 e4       	ldi	r24, 0x44	; 68
 1e0:	0e 94 57 01 	call	0x2ae	; 0x2ae <Button_Read>
	Delay_Seconds(Debounce_Delay);
 1e4:	6d ec       	ldi	r22, 0xCD	; 205
 1e6:	7c ec       	ldi	r23, 0xCC	; 204
 1e8:	8c e4       	ldi	r24, 0x4C	; 76
 1ea:	9e e3       	ldi	r25, 0x3E	; 62
 1ec:	0e 94 3b 03 	call	0x676	; 0x676 <Delay_Seconds>
	Button_Read(DIO_PORTD,DIO_PIN2,&state);
 1f0:	ae 01       	movw	r20, r28
 1f2:	4f 5f       	subi	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	84 e4       	ldi	r24, 0x44	; 68
 1fa:	0e 94 57 01 	call	0x2ae	; 0x2ae <Button_Read>
	if(state==PIN_HIGH){
	}
	if(state==PIN_LOW){
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	81 11       	cpse	r24, r1
 202:	0c c0       	rjmp	.+24     	; 0x21c <__vector_1+0x72>
		if(Traffic_State_==Start_state){}
		if(Traffic_State_==Green_Light_For_Cars){
 204:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Traffic_State_>
 208:	81 11       	cpse	r24, r1
 20a:	08 c0       	rjmp	.+16     	; 0x21c <__vector_1+0x72>
		Yellow_Light_Pedestrian_Mode();
 20c:	0e 94 a9 00 	call	0x152	; 0x152 <Yellow_Light_Pedestrian_Mode>
		Red_Light_Normal_Mode();
 210:	0e 94 8f 00 	call	0x11e	; 0x11e <Red_Light_Normal_Mode>
		Yellow_Light_Normal_Mode();	
 214:	0e 94 57 00 	call	0xae	; 0xae <Yellow_Light_Normal_Mode>
		Green_Light_Normal_Mode();
 218:	0e 94 3e 00 	call	0x7c	; 0x7c <Green_Light_Normal_Mode>
			}
		if(Traffic_State_==Red_Light_For_Cars){}
		}
}
 21c:	0f 90       	pop	r0
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <App_Init>:
void App_Init(){
	Traffic_State_=Start_state;
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Traffic_State_>
	Button_init(DIO_PORTD,DIO_PIN2);
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	84 e4       	ldi	r24, 0x44	; 68
 24e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Button_init>
	Led_inti(DIO_PORTA,DIO_PIN0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	81 e4       	ldi	r24, 0x41	; 65
 256:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Led_inti>
	Led_inti(DIO_PORTA,DIO_PIN1);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	81 e4       	ldi	r24, 0x41	; 65
 25e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Led_inti>
	Led_inti(DIO_PORTA,DIO_PIN2);
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Led_inti>
	Led_inti(DIO_PORTB,DIO_PIN0);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	82 e4       	ldi	r24, 0x42	; 66
 26e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Led_inti>
	Led_inti(DIO_PORTB,DIO_PIN1);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	82 e4       	ldi	r24, 0x42	; 66
 276:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Led_inti>
	Led_inti(DIO_PORTB,DIO_PIN2);
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	82 e4       	ldi	r24, 0x42	; 66
 27e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Led_inti>
	INTERRUPT0_Init();
 282:	0e 94 30 03 	call	0x660	; 0x660 <INTERRUPT0_Init>
	Traffic_State_=Red_Light_For_Cars;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Traffic_State_>
 28c:	08 95       	ret

0000028e <App_Start>:
}
void App_Start(){
	while(1)
	{
		    Green_Light_Normal_Mode();
 28e:	0e 94 3e 00 	call	0x7c	; 0x7c <Green_Light_Normal_Mode>
			Yellow_Light_Normal_Mode();
 292:	0e 94 57 00 	call	0xae	; 0xae <Yellow_Light_Normal_Mode>
			Red_Light_Normal_Mode();
 296:	0e 94 8f 00 	call	0x11e	; 0x11e <Red_Light_Normal_Mode>
			Yellow_Light_Normal_Mode();
 29a:	0e 94 57 00 	call	0xae	; 0xae <Yellow_Light_Normal_Mode>
 29e:	f7 cf       	rjmp	.-18     	; 0x28e <App_Start>

000002a0 <Button_init>:
 *
 * Created: 9/10/2022 8:33:22 PM
 *  Author: Mahmoud
 */ 
#include "On-demand Traffic light control/ECUAL/Button_Driver/button.h"
void Button_init(uint8_t Button_Port, uint8_t Button_Pin){
 2a0:	98 2f       	mov	r25, r24
 2a2:	86 2f       	mov	r24, r22
	DIO_init(Button_Pin,Button_Port,PIN_INPUT);	
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	69 2f       	mov	r22, r25
 2a8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_init>
 2ac:	08 95       	ret

000002ae <Button_Read>:
}
void Button_Read(uint8_t Button_Port, uint8_t Button_Pin, uint8_t *state){
 2ae:	98 2f       	mov	r25, r24
 2b0:	86 2f       	mov	r24, r22
	DIO_read(Button_Pin,Button_Port,state);
 2b2:	69 2f       	mov	r22, r25
 2b4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <DIO_read>
 2b8:	08 95       	ret

000002ba <Led_inti>:
 *
 * Created: 9/10/2022 7:44:43 PM
 *  Author: Mahmoud
 */ 
#include "On-demand Traffic light control/ECUAL/Led_Driver/led.h"
void Led_inti(uint8_t Led_Port , uint8_t Led_Pin){
 2ba:	98 2f       	mov	r25, r24
 2bc:	86 2f       	mov	r24, r22
	DIO_init(Led_Pin,Led_Port,PIN_OUTPUT);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	69 2f       	mov	r22, r25
 2c2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_init>
 2c6:	08 95       	ret

000002c8 <Led_on>:
}

void Led_on(uint8_t Led_Port , uint8_t Led_Pin){
 2c8:	98 2f       	mov	r25, r24
 2ca:	86 2f       	mov	r24, r22
	DIO_write(Led_Pin,Led_Port,PIN_HIGH);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	69 2f       	mov	r22, r25
 2d0:	0e 94 08 02 	call	0x410	; 0x410 <DIO_write>
 2d4:	08 95       	ret

000002d6 <Led_off>:
}
void Led_off(uint8_t Led_Port , uint8_t Led_Pin){
 2d6:	98 2f       	mov	r25, r24
 2d8:	86 2f       	mov	r24, r22
	DIO_write(Led_Pin,Led_Port,PIN_LOW);
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	69 2f       	mov	r22, r25
 2de:	0e 94 08 02 	call	0x410	; 0x410 <DIO_write>
 2e2:	08 95       	ret

000002e4 <Led_toggle>:
}
void Led_toggle(uint8_t Led_Port , uint8_t Led_Pin){
 2e4:	98 2f       	mov	r25, r24
 2e6:	86 2f       	mov	r24, r22
	DIO_toggle(Led_Pin,Led_Port);
 2e8:	69 2f       	mov	r22, r25
 2ea:	0e 94 91 02 	call	0x522	; 0x522 <DIO_toggle>
 2ee:	08 95       	ret

000002f0 <main>:
 */ 

#include "On-demand Traffic light control/Application/Application.h"
int main(void)
{
    App_Init();
 2f0:	0e 94 22 01 	call	0x244	; 0x244 <App_Init>
	App_Start();
 2f4:	0e 94 47 01 	call	0x28e	; 0x28e <App_Start>
}
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	08 95       	ret

000002fe <DIO_init>:

#include "On-demand Traffic light control/MCAL/Dio_Driver/DIO.h"
////////////////////////////////initialize port (output/input)//////////////////////////////////////////////////////
void DIO_init(uint8_t Pin_Number , uint8_t Port_Number,uint8_t Direction )
{
	switch(Port_Number){
 2fe:	62 34       	cpi	r22, 0x42	; 66
 300:	51 f1       	breq	.+84     	; 0x356 <DIO_init+0x58>
 302:	18 f4       	brcc	.+6      	; 0x30a <DIO_init+0xc>
 304:	61 34       	cpi	r22, 0x41	; 65
 306:	41 f0       	breq	.+16     	; 0x318 <DIO_init+0x1a>
 308:	08 95       	ret
 30a:	63 34       	cpi	r22, 0x43	; 67
 30c:	09 f4       	brne	.+2      	; 0x310 <DIO_init+0x12>
 30e:	42 c0       	rjmp	.+132    	; 0x394 <DIO_init+0x96>
 310:	64 34       	cpi	r22, 0x44	; 68
 312:	09 f4       	brne	.+2      	; 0x316 <DIO_init+0x18>
 314:	5e c0       	rjmp	.+188    	; 0x3d2 <DIO_init+0xd4>
 316:	08 95       	ret
		case 'A':
		if(Direction==PIN_OUTPUT){
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	69 f4       	brne	.+26     	; 0x336 <DIO_init+0x38>
		DDRA |=(1<<Pin_Number);
 31c:	4a b3       	in	r20, 0x1a	; 26
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_init+0x2c>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_init+0x28>
 32e:	cb 01       	movw	r24, r22
 330:	84 2b       	or	r24, r20
 332:	8a bb       	out	0x1a, r24	; 26
 334:	08 95       	ret
		}
		else if(Direction==PIN_INPUT){
 336:	41 11       	cpse	r20, r1
 338:	6a c0       	rjmp	.+212    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			DDRA &=~(1<<Pin_Number);
 33a:	4a b3       	in	r20, 0x1a	; 26
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	b9 01       	movw	r22, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_init+0x4a>
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	8a 95       	dec	r24
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_init+0x46>
 34c:	cb 01       	movw	r24, r22
 34e:	80 95       	com	r24
 350:	84 23       	and	r24, r20
 352:	8a bb       	out	0x1a, r24	; 26
 354:	08 95       	ret
		else{
			//error handling ,make the function return something
		}
		break;
		case 'B':
		if(Direction==PIN_OUTPUT){
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	69 f4       	brne	.+26     	; 0x374 <DIO_init+0x76>
			DDRB |=(1<<Pin_Number);
 35a:	47 b3       	in	r20, 0x17	; 23
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_init+0x6a>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	8a 95       	dec	r24
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_init+0x66>
 36c:	cb 01       	movw	r24, r22
 36e:	84 2b       	or	r24, r20
 370:	87 bb       	out	0x17, r24	; 23
 372:	08 95       	ret
		}
		else if(Direction==PIN_INPUT){
 374:	41 11       	cpse	r20, r1
 376:	4b c0       	rjmp	.+150    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			DDRB &=~(1<<Pin_Number);
 378:	47 b3       	in	r20, 0x17	; 23
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	b9 01       	movw	r22, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_init+0x88>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	8a 95       	dec	r24
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_init+0x84>
 38a:	cb 01       	movw	r24, r22
 38c:	80 95       	com	r24
 38e:	84 23       	and	r24, r20
 390:	87 bb       	out	0x17, r24	; 23
 392:	08 95       	ret
		else{
			//error handling ,make the function return something
		}
		break;
		case 'C':
		if(Direction==PIN_OUTPUT){
 394:	41 30       	cpi	r20, 0x01	; 1
 396:	69 f4       	brne	.+26     	; 0x3b2 <DIO_init+0xb4>
			DDRC |=(1<<Pin_Number);
 398:	44 b3       	in	r20, 0x14	; 20
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_init+0xa8>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_init+0xa4>
 3aa:	cb 01       	movw	r24, r22
 3ac:	84 2b       	or	r24, r20
 3ae:	84 bb       	out	0x14, r24	; 20
 3b0:	08 95       	ret
		}
		else if(Direction==PIN_INPUT){
 3b2:	41 11       	cpse	r20, r1
 3b4:	2c c0       	rjmp	.+88     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			DDRC &=~(1<<Pin_Number);
 3b6:	44 b3       	in	r20, 0x14	; 20
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	b9 01       	movw	r22, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_init+0xc6>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_init+0xc2>
 3c8:	cb 01       	movw	r24, r22
 3ca:	80 95       	com	r24
 3cc:	84 23       	and	r24, r20
 3ce:	84 bb       	out	0x14, r24	; 20
 3d0:	08 95       	ret
		else{
			//error handling ,make the function return something
		}
		break;
		case 'D':
		if(Direction==PIN_OUTPUT){
 3d2:	41 30       	cpi	r20, 0x01	; 1
 3d4:	69 f4       	brne	.+26     	; 0x3f0 <DIO_init+0xf2>
			DDRD |=(1<<Pin_Number);
 3d6:	41 b3       	in	r20, 0x11	; 17
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	b9 01       	movw	r22, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_init+0xe6>
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	8a 95       	dec	r24
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_init+0xe2>
 3e8:	cb 01       	movw	r24, r22
 3ea:	84 2b       	or	r24, r20
 3ec:	81 bb       	out	0x11, r24	; 17
 3ee:	08 95       	ret
		}
		else if(Direction==PIN_INPUT){
 3f0:	41 11       	cpse	r20, r1
 3f2:	0d c0       	rjmp	.+26     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			DDRD &=~(1<<Pin_Number);
 3f4:	41 b3       	in	r20, 0x11	; 17
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	b9 01       	movw	r22, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	8a 95       	dec	r24
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_init+0x100>
 406:	cb 01       	movw	r24, r22
 408:	80 95       	com	r24
 40a:	84 23       	and	r24, r20
 40c:	81 bb       	out	0x11, r24	; 17
 40e:	08 95       	ret

00000410 <DIO_write>:
		
	}
}
/////////////////////////////////////////////////Write function/////////////////////////////////////////
void DIO_write(uint8_t Pin_Number , uint8_t Port_Number,uint8_t value){
	switch(Port_Number){
 410:	62 34       	cpi	r22, 0x42	; 66
 412:	51 f1       	breq	.+84     	; 0x468 <DIO_write+0x58>
 414:	18 f4       	brcc	.+6      	; 0x41c <DIO_write+0xc>
 416:	61 34       	cpi	r22, 0x41	; 65
 418:	41 f0       	breq	.+16     	; 0x42a <DIO_write+0x1a>
 41a:	08 95       	ret
 41c:	63 34       	cpi	r22, 0x43	; 67
 41e:	09 f4       	brne	.+2      	; 0x422 <DIO_write+0x12>
 420:	42 c0       	rjmp	.+132    	; 0x4a6 <DIO_write+0x96>
 422:	64 34       	cpi	r22, 0x44	; 68
 424:	09 f4       	brne	.+2      	; 0x428 <DIO_write+0x18>
 426:	5e c0       	rjmp	.+188    	; 0x4e4 <DIO_write+0xd4>
 428:	08 95       	ret
		case 'A':
		if(value==PIN_HIGH){
 42a:	41 30       	cpi	r20, 0x01	; 1
 42c:	69 f4       	brne	.+26     	; 0x448 <DIO_write+0x38>
			PORTA |=(1<<Pin_Number);
 42e:	4b b3       	in	r20, 0x1b	; 27
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	b9 01       	movw	r22, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_write+0x2c>
 438:	66 0f       	add	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	8a 95       	dec	r24
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_write+0x28>
 440:	cb 01       	movw	r24, r22
 442:	84 2b       	or	r24, r20
 444:	8b bb       	out	0x1b, r24	; 27
 446:	08 95       	ret
		}
		else if(value==PIN_LOW){
 448:	41 11       	cpse	r20, r1
 44a:	6a c0       	rjmp	.+212    	; 0x520 <DIO_write+0x110>
			PORTA &=~(1<<Pin_Number);
 44c:	4b b3       	in	r20, 0x1b	; 27
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_write+0x4a>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_write+0x46>
 45e:	cb 01       	movw	r24, r22
 460:	80 95       	com	r24
 462:	84 23       	and	r24, r20
 464:	8b bb       	out	0x1b, r24	; 27
 466:	08 95       	ret
		else{
			//error handling ,make the function return something
		}
		break;
		case 'B':
		if(value==PIN_HIGH){
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_write+0x76>
			PORTB |=(1<<Pin_Number);
 46c:	48 b3       	in	r20, 0x18	; 24
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	b9 01       	movw	r22, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_write+0x6a>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	8a 95       	dec	r24
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_write+0x66>
 47e:	cb 01       	movw	r24, r22
 480:	84 2b       	or	r24, r20
 482:	88 bb       	out	0x18, r24	; 24
 484:	08 95       	ret
		}
		else if(value==PIN_LOW){
 486:	41 11       	cpse	r20, r1
 488:	4b c0       	rjmp	.+150    	; 0x520 <DIO_write+0x110>
			PORTB &=~(1<<Pin_Number);
 48a:	48 b3       	in	r20, 0x18	; 24
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	b9 01       	movw	r22, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_write+0x88>
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	8a 95       	dec	r24
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_write+0x84>
 49c:	cb 01       	movw	r24, r22
 49e:	80 95       	com	r24
 4a0:	84 23       	and	r24, r20
 4a2:	88 bb       	out	0x18, r24	; 24
 4a4:	08 95       	ret
		else{
			//error handling ,make the function return something
		}
		break;
		case 'C':
		if(value==PIN_HIGH){
 4a6:	41 30       	cpi	r20, 0x01	; 1
 4a8:	69 f4       	brne	.+26     	; 0x4c4 <DIO_write+0xb4>
			PORTC |=(1<<Pin_Number);
 4aa:	45 b3       	in	r20, 0x15	; 21
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	b9 01       	movw	r22, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_write+0xa8>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_write+0xa4>
 4bc:	cb 01       	movw	r24, r22
 4be:	84 2b       	or	r24, r20
 4c0:	85 bb       	out	0x15, r24	; 21
 4c2:	08 95       	ret
		}
		else if(value==PIN_LOW){
 4c4:	41 11       	cpse	r20, r1
 4c6:	2c c0       	rjmp	.+88     	; 0x520 <DIO_write+0x110>
			PORTC &=~(1<<Pin_Number);
 4c8:	45 b3       	in	r20, 0x15	; 21
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	b9 01       	movw	r22, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_write+0xc6>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	8a 95       	dec	r24
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_write+0xc2>
 4da:	cb 01       	movw	r24, r22
 4dc:	80 95       	com	r24
 4de:	84 23       	and	r24, r20
 4e0:	85 bb       	out	0x15, r24	; 21
 4e2:	08 95       	ret
		else{
			//error handling ,make the function return something
		}
		break;
		case 'D':
		if(value==PIN_HIGH){
 4e4:	41 30       	cpi	r20, 0x01	; 1
 4e6:	69 f4       	brne	.+26     	; 0x502 <DIO_write+0xf2>
			PORTD |=(1<<Pin_Number);
 4e8:	42 b3       	in	r20, 0x12	; 18
 4ea:	21 e0       	ldi	r18, 0x01	; 1
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	b9 01       	movw	r22, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_write+0xe6>
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	8a 95       	dec	r24
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_write+0xe2>
 4fa:	cb 01       	movw	r24, r22
 4fc:	84 2b       	or	r24, r20
 4fe:	82 bb       	out	0x12, r24	; 18
 500:	08 95       	ret
		}
		else if(value==PIN_LOW){
 502:	41 11       	cpse	r20, r1
 504:	0d c0       	rjmp	.+26     	; 0x520 <DIO_write+0x110>
			PORTD &=~(1<<Pin_Number);
 506:	42 b3       	in	r20, 0x12	; 18
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	b9 01       	movw	r22, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_write+0x104>
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	8a 95       	dec	r24
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_write+0x100>
 518:	cb 01       	movw	r24, r22
 51a:	80 95       	com	r24
 51c:	84 23       	and	r24, r20
 51e:	82 bb       	out	0x12, r24	; 18
 520:	08 95       	ret

00000522 <DIO_toggle>:
		break;
}
}
/////////////////////////////////////////toggle function//////////////////////////////
void DIO_toggle(uint8_t Pin_Number , uint8_t Port_Number){
	switch(Port_Number){
 522:	62 34       	cpi	r22, 0x42	; 66
 524:	b1 f0       	breq	.+44     	; 0x552 <DIO_toggle+0x30>
 526:	18 f4       	brcc	.+6      	; 0x52e <DIO_toggle+0xc>
 528:	61 34       	cpi	r22, 0x41	; 65
 52a:	31 f0       	breq	.+12     	; 0x538 <DIO_toggle+0x16>
 52c:	08 95       	ret
 52e:	63 34       	cpi	r22, 0x43	; 67
 530:	e9 f0       	breq	.+58     	; 0x56c <DIO_toggle+0x4a>
 532:	64 34       	cpi	r22, 0x44	; 68
 534:	41 f1       	breq	.+80     	; 0x586 <DIO_toggle+0x64>
 536:	08 95       	ret
		case 'A':
		TOGGLE_BIT(PORTA,Pin_Number);
 538:	4b b3       	in	r20, 0x1b	; 27
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	b9 01       	movw	r22, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_toggle+0x24>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	8a 95       	dec	r24
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_toggle+0x20>
 54a:	cb 01       	movw	r24, r22
 54c:	84 27       	eor	r24, r20
 54e:	8b bb       	out	0x1b, r24	; 27
		break;
 550:	08 95       	ret
		case 'B':
		TOGGLE_BIT(PORTB,Pin_Number);
 552:	48 b3       	in	r20, 0x18	; 24
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	b9 01       	movw	r22, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_toggle+0x3e>
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	8a 95       	dec	r24
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_toggle+0x3a>
 564:	cb 01       	movw	r24, r22
 566:	84 27       	eor	r24, r20
 568:	88 bb       	out	0x18, r24	; 24
		break;
 56a:	08 95       	ret
		case 'C':
		TOGGLE_BIT(PORTC,Pin_Number);
 56c:	45 b3       	in	r20, 0x15	; 21
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	b9 01       	movw	r22, r18
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_toggle+0x58>
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	8a 95       	dec	r24
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_toggle+0x54>
 57e:	cb 01       	movw	r24, r22
 580:	84 27       	eor	r24, r20
 582:	85 bb       	out	0x15, r24	; 21
		break;
 584:	08 95       	ret
		case 'D':
		TOGGLE_BIT(PORTD,Pin_Number);
 586:	42 b3       	in	r20, 0x12	; 18
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	b9 01       	movw	r22, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_toggle+0x72>
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	8a 95       	dec	r24
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_toggle+0x6e>
 598:	cb 01       	movw	r24, r22
 59a:	84 27       	eor	r24, r20
 59c:	82 bb       	out	0x12, r24	; 18
 59e:	08 95       	ret

000005a0 <DIO_read>:
		break;
	}
}
void DIO_read(uint8_t Pin_Number , uint8_t Port_Number,uint8_t *value){
	switch(Port_Number){
 5a0:	62 34       	cpi	r22, 0x42	; 66
 5a2:	f9 f0       	breq	.+62     	; 0x5e2 <DIO_read+0x42>
 5a4:	18 f4       	brcc	.+6      	; 0x5ac <DIO_read+0xc>
 5a6:	61 34       	cpi	r22, 0x41	; 65
 5a8:	39 f0       	breq	.+14     	; 0x5b8 <DIO_read+0x18>
 5aa:	08 95       	ret
 5ac:	63 34       	cpi	r22, 0x43	; 67
 5ae:	71 f1       	breq	.+92     	; 0x60c <DIO_read+0x6c>
 5b0:	64 34       	cpi	r22, 0x44	; 68
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <DIO_read+0x16>
 5b4:	40 c0       	rjmp	.+128    	; 0x636 <DIO_read+0x96>
 5b6:	08 95       	ret
		case 'A':
		*value=READ_BIT(PINA,Pin_Number);
 5b8:	69 b3       	in	r22, 0x19	; 25
 5ba:	21 e0       	ldi	r18, 0x01	; 1
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	08 2e       	mov	r0, r24
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_read+0x26>
 5c2:	22 0f       	add	r18, r18
 5c4:	33 1f       	adc	r19, r19
 5c6:	0a 94       	dec	r0
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_read+0x22>
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	26 23       	and	r18, r22
 5ce:	37 23       	and	r19, r23
 5d0:	b9 01       	movw	r22, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_read+0x38>
 5d4:	75 95       	asr	r23
 5d6:	67 95       	ror	r22
 5d8:	8a 95       	dec	r24
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_read+0x34>
 5dc:	fa 01       	movw	r30, r20
 5de:	60 83       	st	Z, r22
		break;
 5e0:	08 95       	ret
		case 'B':
		*value=READ_BIT(PINB,Pin_Number);
 5e2:	66 b3       	in	r22, 0x16	; 22
 5e4:	21 e0       	ldi	r18, 0x01	; 1
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	08 2e       	mov	r0, r24
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_read+0x50>
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	0a 94       	dec	r0
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_read+0x4c>
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	26 23       	and	r18, r22
 5f8:	37 23       	and	r19, r23
 5fa:	b9 01       	movw	r22, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_read+0x62>
 5fe:	75 95       	asr	r23
 600:	67 95       	ror	r22
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_read+0x5e>
 606:	fa 01       	movw	r30, r20
 608:	60 83       	st	Z, r22
		break;
 60a:	08 95       	ret
		case 'C':
		*value=READ_BIT(PINC,Pin_Number);
 60c:	63 b3       	in	r22, 0x13	; 19
 60e:	21 e0       	ldi	r18, 0x01	; 1
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	08 2e       	mov	r0, r24
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_read+0x7a>
 616:	22 0f       	add	r18, r18
 618:	33 1f       	adc	r19, r19
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_read+0x76>
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	26 23       	and	r18, r22
 622:	37 23       	and	r19, r23
 624:	b9 01       	movw	r22, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_read+0x8c>
 628:	75 95       	asr	r23
 62a:	67 95       	ror	r22
 62c:	8a 95       	dec	r24
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_read+0x88>
 630:	fa 01       	movw	r30, r20
 632:	60 83       	st	Z, r22
		break;
 634:	08 95       	ret
		case 'D':
		*value=READ_BIT(PIND,Pin_Number);
 636:	60 b3       	in	r22, 0x10	; 16
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	08 2e       	mov	r0, r24
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_read+0xa4>
 640:	22 0f       	add	r18, r18
 642:	33 1f       	adc	r19, r19
 644:	0a 94       	dec	r0
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_read+0xa0>
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	26 23       	and	r18, r22
 64c:	37 23       	and	r19, r23
 64e:	b9 01       	movw	r22, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_read+0xb6>
 652:	75 95       	asr	r23
 654:	67 95       	ror	r22
 656:	8a 95       	dec	r24
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_read+0xb2>
 65a:	fa 01       	movw	r30, r20
 65c:	60 83       	st	Z, r22
 65e:	08 95       	ret

00000660 <INTERRUPT0_Init>:
 * Created: 9/13/2022 10:48:31 PM
 *  Author: Mahmoud
 */ 
#include "On-demand Traffic light control/MCAL/Interrupt_Driver/Interrupt.h"
void INTERRUPT0_Init(){
	sei(); //EN_Global_INTERRUPTS
 660:	78 94       	sei
	SET_BIT(MCUCR,0);
 662:	85 b7       	in	r24, 0x35	; 53
 664:	81 60       	ori	r24, 0x01	; 1
 666:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);
 668:	85 b7       	in	r24, 0x35	; 53
 66a:	82 60       	ori	r24, 0x02	; 2
 66c:	85 bf       	out	0x35, r24	; 53
	SET_BIT(GICR,INT0);
 66e:	8b b7       	in	r24, 0x3b	; 59
 670:	80 64       	ori	r24, 0x40	; 64
 672:	8b bf       	out	0x3b, r24	; 59
 674:	08 95       	ret

00000676 <Delay_Seconds>:
}
void Timer_Stop(){
	TCCR0=0x00;
	TCNT0=0x00;
}
void Delay_Seconds(float Seconds){
 676:	cf 92       	push	r12
 678:	df 92       	push	r13
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
	int Over_Flow_counter=0;
	    TCCR0=Normal_Mode;
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	23 bf       	out	0x33, r18	; 51
		TCNT0=0x00;
 686:	12 be       	out	0x32, r1	; 50
		while(Over_Flow_counter < (Seconds*Number_of_overflows_for_1second)){	
 688:	20 e0       	ldi	r18, 0x00	; 0
 68a:	30 e2       	ldi	r19, 0x20	; 32
 68c:	44 e7       	ldi	r20, 0x74	; 116
 68e:	55 e4       	ldi	r21, 0x45	; 69
 690:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3>
 694:	6b 01       	movw	r12, r22
 696:	7c 01       	movw	r14, r24
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	a9 01       	movw	r20, r18
 69e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__gesf2>
 6a2:	18 16       	cp	r1, r24
 6a4:	b4 f4       	brge	.+44     	; 0x6d2 <Delay_Seconds+0x5c>
 6a6:	c0 e0       	ldi	r28, 0x00	; 0
 6a8:	d0 e0       	ldi	r29, 0x00	; 0
			while ((READ_BIT(TIFR,0))==0);
 6aa:	08 b6       	in	r0, 0x38	; 56
 6ac:	00 fe       	sbrs	r0, 0
 6ae:	fd cf       	rjmp	.-6      	; 0x6aa <Delay_Seconds+0x34>
			SET_BIT(TIFR,0);
 6b0:	88 b7       	in	r24, 0x38	; 56
 6b2:	81 60       	ori	r24, 0x01	; 1
 6b4:	88 bf       	out	0x38, r24	; 56
			Over_Flow_counter++;
 6b6:	21 96       	adiw	r28, 0x01	; 1
}
void Delay_Seconds(float Seconds){
	int Over_Flow_counter=0;
	    TCCR0=Normal_Mode;
		TCNT0=0x00;
		while(Over_Flow_counter < (Seconds*Number_of_overflows_for_1second)){	
 6b8:	be 01       	movw	r22, r28
 6ba:	0d 2e       	mov	r0, r29
 6bc:	00 0c       	add	r0, r0
 6be:	88 0b       	sbc	r24, r24
 6c0:	99 0b       	sbc	r25, r25
 6c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__floatsisf>
 6c6:	a7 01       	movw	r20, r14
 6c8:	96 01       	movw	r18, r12
 6ca:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__cmpsf2>
 6ce:	88 23       	and	r24, r24
 6d0:	64 f3       	brlt	.-40     	; 0x6aa <Delay_Seconds+0x34>
			while ((READ_BIT(TIFR,0))==0);
			SET_BIT(TIFR,0);
			Over_Flow_counter++;
		}
		Over_Flow_counter=0;
		TCCR0=Normal_Mode;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	83 bf       	out	0x33, r24	; 51
}
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	ff 90       	pop	r15
 6dc:	ef 90       	pop	r14
 6de:	df 90       	pop	r13
 6e0:	cf 90       	pop	r12
 6e2:	08 95       	ret

000006e4 <__cmpsf2>:
 6e4:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_cmp>
 6e8:	08 f4       	brcc	.+2      	; 0x6ec <__cmpsf2+0x8>
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	08 95       	ret

000006ee <__floatunsisf>:
 6ee:	e8 94       	clt
 6f0:	09 c0       	rjmp	.+18     	; 0x704 <__floatsisf+0x12>

000006f2 <__floatsisf>:
 6f2:	97 fb       	bst	r25, 7
 6f4:	3e f4       	brtc	.+14     	; 0x704 <__floatsisf+0x12>
 6f6:	90 95       	com	r25
 6f8:	80 95       	com	r24
 6fa:	70 95       	com	r23
 6fc:	61 95       	neg	r22
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	99 23       	and	r25, r25
 706:	a9 f0       	breq	.+42     	; 0x732 <__floatsisf+0x40>
 708:	f9 2f       	mov	r31, r25
 70a:	96 e9       	ldi	r25, 0x96	; 150
 70c:	bb 27       	eor	r27, r27
 70e:	93 95       	inc	r25
 710:	f6 95       	lsr	r31
 712:	87 95       	ror	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b7 95       	ror	r27
 71a:	f1 11       	cpse	r31, r1
 71c:	f8 cf       	rjmp	.-16     	; 0x70e <__floatsisf+0x1c>
 71e:	fa f4       	brpl	.+62     	; 0x75e <__floatsisf+0x6c>
 720:	bb 0f       	add	r27, r27
 722:	11 f4       	brne	.+4      	; 0x728 <__floatsisf+0x36>
 724:	60 ff       	sbrs	r22, 0
 726:	1b c0       	rjmp	.+54     	; 0x75e <__floatsisf+0x6c>
 728:	6f 5f       	subi	r22, 0xFF	; 255
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	16 c0       	rjmp	.+44     	; 0x75e <__floatsisf+0x6c>
 732:	88 23       	and	r24, r24
 734:	11 f0       	breq	.+4      	; 0x73a <__floatsisf+0x48>
 736:	96 e9       	ldi	r25, 0x96	; 150
 738:	11 c0       	rjmp	.+34     	; 0x75c <__floatsisf+0x6a>
 73a:	77 23       	and	r23, r23
 73c:	21 f0       	breq	.+8      	; 0x746 <__floatsisf+0x54>
 73e:	9e e8       	ldi	r25, 0x8E	; 142
 740:	87 2f       	mov	r24, r23
 742:	76 2f       	mov	r23, r22
 744:	05 c0       	rjmp	.+10     	; 0x750 <__floatsisf+0x5e>
 746:	66 23       	and	r22, r22
 748:	71 f0       	breq	.+28     	; 0x766 <__floatsisf+0x74>
 74a:	96 e8       	ldi	r25, 0x86	; 134
 74c:	86 2f       	mov	r24, r22
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	2a f0       	brmi	.+10     	; 0x75e <__floatsisf+0x6c>
 754:	9a 95       	dec	r25
 756:	66 0f       	add	r22, r22
 758:	77 1f       	adc	r23, r23
 75a:	88 1f       	adc	r24, r24
 75c:	da f7       	brpl	.-10     	; 0x754 <__floatsisf+0x62>
 75e:	88 0f       	add	r24, r24
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret

00000768 <__fp_cmp>:
 768:	99 0f       	add	r25, r25
 76a:	00 08       	sbc	r0, r0
 76c:	55 0f       	add	r21, r21
 76e:	aa 0b       	sbc	r26, r26
 770:	e0 e8       	ldi	r30, 0x80	; 128
 772:	fe ef       	ldi	r31, 0xFE	; 254
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	e8 07       	cpc	r30, r24
 77a:	f9 07       	cpc	r31, r25
 77c:	c0 f0       	brcs	.+48     	; 0x7ae <__fp_cmp+0x46>
 77e:	12 16       	cp	r1, r18
 780:	13 06       	cpc	r1, r19
 782:	e4 07       	cpc	r30, r20
 784:	f5 07       	cpc	r31, r21
 786:	98 f0       	brcs	.+38     	; 0x7ae <__fp_cmp+0x46>
 788:	62 1b       	sub	r22, r18
 78a:	73 0b       	sbc	r23, r19
 78c:	84 0b       	sbc	r24, r20
 78e:	95 0b       	sbc	r25, r21
 790:	39 f4       	brne	.+14     	; 0x7a0 <__fp_cmp+0x38>
 792:	0a 26       	eor	r0, r26
 794:	61 f0       	breq	.+24     	; 0x7ae <__fp_cmp+0x46>
 796:	23 2b       	or	r18, r19
 798:	24 2b       	or	r18, r20
 79a:	25 2b       	or	r18, r21
 79c:	21 f4       	brne	.+8      	; 0x7a6 <__fp_cmp+0x3e>
 79e:	08 95       	ret
 7a0:	0a 26       	eor	r0, r26
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <__fp_cmp+0x3e>
 7a4:	a1 40       	sbci	r26, 0x01	; 1
 7a6:	a6 95       	lsr	r26
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
 7aa:	81 1d       	adc	r24, r1
 7ac:	81 1d       	adc	r24, r1
 7ae:	08 95       	ret

000007b0 <__gesf2>:
 7b0:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_cmp>
 7b4:	08 f4       	brcc	.+2      	; 0x7b8 <__gesf2+0x8>
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	08 95       	ret

000007ba <__mulsf3>:
 7ba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__mulsf3x>
 7be:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_round>
 7c2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscA>
 7c6:	38 f0       	brcs	.+14     	; 0x7d6 <__mulsf3+0x1c>
 7c8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscB>
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__mulsf3+0x1c>
 7ce:	95 23       	and	r25, r21
 7d0:	11 f0       	breq	.+4      	; 0x7d6 <__mulsf3+0x1c>
 7d2:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
 7d6:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_nan>
 7da:	11 24       	eor	r1, r1
 7dc:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>

000007e0 <__mulsf3x>:
 7e0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_split3>
 7e4:	70 f3       	brcs	.-36     	; 0x7c2 <__mulsf3+0x8>

000007e6 <__mulsf3_pse>:
 7e6:	95 9f       	mul	r25, r21
 7e8:	c1 f3       	breq	.-16     	; 0x7da <__mulsf3+0x20>
 7ea:	95 0f       	add	r25, r21
 7ec:	50 e0       	ldi	r21, 0x00	; 0
 7ee:	55 1f       	adc	r21, r21
 7f0:	62 9f       	mul	r22, r18
 7f2:	f0 01       	movw	r30, r0
 7f4:	72 9f       	mul	r23, r18
 7f6:	bb 27       	eor	r27, r27
 7f8:	f0 0d       	add	r31, r0
 7fa:	b1 1d       	adc	r27, r1
 7fc:	63 9f       	mul	r22, r19
 7fe:	aa 27       	eor	r26, r26
 800:	f0 0d       	add	r31, r0
 802:	b1 1d       	adc	r27, r1
 804:	aa 1f       	adc	r26, r26
 806:	64 9f       	mul	r22, r20
 808:	66 27       	eor	r22, r22
 80a:	b0 0d       	add	r27, r0
 80c:	a1 1d       	adc	r26, r1
 80e:	66 1f       	adc	r22, r22
 810:	82 9f       	mul	r24, r18
 812:	22 27       	eor	r18, r18
 814:	b0 0d       	add	r27, r0
 816:	a1 1d       	adc	r26, r1
 818:	62 1f       	adc	r22, r18
 81a:	73 9f       	mul	r23, r19
 81c:	b0 0d       	add	r27, r0
 81e:	a1 1d       	adc	r26, r1
 820:	62 1f       	adc	r22, r18
 822:	83 9f       	mul	r24, r19
 824:	a0 0d       	add	r26, r0
 826:	61 1d       	adc	r22, r1
 828:	22 1f       	adc	r18, r18
 82a:	74 9f       	mul	r23, r20
 82c:	33 27       	eor	r19, r19
 82e:	a0 0d       	add	r26, r0
 830:	61 1d       	adc	r22, r1
 832:	23 1f       	adc	r18, r19
 834:	84 9f       	mul	r24, r20
 836:	60 0d       	add	r22, r0
 838:	21 1d       	adc	r18, r1
 83a:	82 2f       	mov	r24, r18
 83c:	76 2f       	mov	r23, r22
 83e:	6a 2f       	mov	r22, r26
 840:	11 24       	eor	r1, r1
 842:	9f 57       	subi	r25, 0x7F	; 127
 844:	50 40       	sbci	r21, 0x00	; 0
 846:	9a f0       	brmi	.+38     	; 0x86e <__stack+0xf>
 848:	f1 f0       	breq	.+60     	; 0x886 <__stack+0x27>
 84a:	88 23       	and	r24, r24
 84c:	4a f0       	brmi	.+18     	; 0x860 <__stack+0x1>
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	bb 1f       	adc	r27, r27
 854:	66 1f       	adc	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	88 1f       	adc	r24, r24
 85a:	91 50       	subi	r25, 0x01	; 1
 85c:	50 40       	sbci	r21, 0x00	; 0
 85e:	a9 f7       	brne	.-22     	; 0x84a <__mulsf3_pse+0x64>
 860:	9e 3f       	cpi	r25, 0xFE	; 254
 862:	51 05       	cpc	r21, r1
 864:	80 f0       	brcs	.+32     	; 0x886 <__stack+0x27>
 866:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
 86a:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>
 86e:	5f 3f       	cpi	r21, 0xFF	; 255
 870:	e4 f3       	brlt	.-8      	; 0x86a <__stack+0xb>
 872:	98 3e       	cpi	r25, 0xE8	; 232
 874:	d4 f3       	brlt	.-12     	; 0x86a <__stack+0xb>
 876:	86 95       	lsr	r24
 878:	77 95       	ror	r23
 87a:	67 95       	ror	r22
 87c:	b7 95       	ror	r27
 87e:	f7 95       	ror	r31
 880:	e7 95       	ror	r30
 882:	9f 5f       	subi	r25, 0xFF	; 255
 884:	c1 f7       	brne	.-16     	; 0x876 <__stack+0x17>
 886:	fe 2b       	or	r31, r30
 888:	88 0f       	add	r24, r24
 88a:	91 1d       	adc	r25, r1
 88c:	96 95       	lsr	r25
 88e:	87 95       	ror	r24
 890:	97 f9       	bld	r25, 7
 892:	08 95       	ret

00000894 <__fp_inf>:
 894:	97 f9       	bld	r25, 7
 896:	9f 67       	ori	r25, 0x7F	; 127
 898:	80 e8       	ldi	r24, 0x80	; 128
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	08 95       	ret

000008a0 <__fp_nan>:
 8a0:	9f ef       	ldi	r25, 0xFF	; 255
 8a2:	80 ec       	ldi	r24, 0xC0	; 192
 8a4:	08 95       	ret

000008a6 <__fp_pscA>:
 8a6:	00 24       	eor	r0, r0
 8a8:	0a 94       	dec	r0
 8aa:	16 16       	cp	r1, r22
 8ac:	17 06       	cpc	r1, r23
 8ae:	18 06       	cpc	r1, r24
 8b0:	09 06       	cpc	r0, r25
 8b2:	08 95       	ret

000008b4 <__fp_pscB>:
 8b4:	00 24       	eor	r0, r0
 8b6:	0a 94       	dec	r0
 8b8:	12 16       	cp	r1, r18
 8ba:	13 06       	cpc	r1, r19
 8bc:	14 06       	cpc	r1, r20
 8be:	05 06       	cpc	r0, r21
 8c0:	08 95       	ret

000008c2 <__fp_round>:
 8c2:	09 2e       	mov	r0, r25
 8c4:	03 94       	inc	r0
 8c6:	00 0c       	add	r0, r0
 8c8:	11 f4       	brne	.+4      	; 0x8ce <__fp_round+0xc>
 8ca:	88 23       	and	r24, r24
 8cc:	52 f0       	brmi	.+20     	; 0x8e2 <__fp_round+0x20>
 8ce:	bb 0f       	add	r27, r27
 8d0:	40 f4       	brcc	.+16     	; 0x8e2 <__fp_round+0x20>
 8d2:	bf 2b       	or	r27, r31
 8d4:	11 f4       	brne	.+4      	; 0x8da <__fp_round+0x18>
 8d6:	60 ff       	sbrs	r22, 0
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <__fp_round+0x20>
 8da:	6f 5f       	subi	r22, 0xFF	; 255
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	8f 4f       	sbci	r24, 0xFF	; 255
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	08 95       	ret

000008e4 <__fp_split3>:
 8e4:	57 fd       	sbrc	r21, 7
 8e6:	90 58       	subi	r25, 0x80	; 128
 8e8:	44 0f       	add	r20, r20
 8ea:	55 1f       	adc	r21, r21
 8ec:	59 f0       	breq	.+22     	; 0x904 <__fp_splitA+0x10>
 8ee:	5f 3f       	cpi	r21, 0xFF	; 255
 8f0:	71 f0       	breq	.+28     	; 0x90e <__fp_splitA+0x1a>
 8f2:	47 95       	ror	r20

000008f4 <__fp_splitA>:
 8f4:	88 0f       	add	r24, r24
 8f6:	97 fb       	bst	r25, 7
 8f8:	99 1f       	adc	r25, r25
 8fa:	61 f0       	breq	.+24     	; 0x914 <__fp_splitA+0x20>
 8fc:	9f 3f       	cpi	r25, 0xFF	; 255
 8fe:	79 f0       	breq	.+30     	; 0x91e <__fp_splitA+0x2a>
 900:	87 95       	ror	r24
 902:	08 95       	ret
 904:	12 16       	cp	r1, r18
 906:	13 06       	cpc	r1, r19
 908:	14 06       	cpc	r1, r20
 90a:	55 1f       	adc	r21, r21
 90c:	f2 cf       	rjmp	.-28     	; 0x8f2 <__fp_split3+0xe>
 90e:	46 95       	lsr	r20
 910:	f1 df       	rcall	.-30     	; 0x8f4 <__fp_splitA>
 912:	08 c0       	rjmp	.+16     	; 0x924 <__fp_splitA+0x30>
 914:	16 16       	cp	r1, r22
 916:	17 06       	cpc	r1, r23
 918:	18 06       	cpc	r1, r24
 91a:	99 1f       	adc	r25, r25
 91c:	f1 cf       	rjmp	.-30     	; 0x900 <__fp_splitA+0xc>
 91e:	86 95       	lsr	r24
 920:	71 05       	cpc	r23, r1
 922:	61 05       	cpc	r22, r1
 924:	08 94       	sec
 926:	08 95       	ret

00000928 <__fp_zero>:
 928:	e8 94       	clt

0000092a <__fp_szero>:
 92a:	bb 27       	eor	r27, r27
 92c:	66 27       	eor	r22, r22
 92e:	77 27       	eor	r23, r23
 930:	cb 01       	movw	r24, r22
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <_exit>:
 936:	f8 94       	cli

00000938 <__stop_program>:
 938:	ff cf       	rjmp	.-2      	; 0x938 <__stop_program>
